apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: volume_role
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - create
  - delete
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - create
  - delete

# get namespace resources
# kubectl api-resources --namespaced=false
# kubectl api-resources --namespaced=false | grep -i pv
# kubectl api-resources --namespaced=false | grep -i storageclass
# check apiGroups of yaml above, for storage classes
# also there is no namespace, as this is cluster wide role

# The user is created in last exercise
# verify cluster level permissions
# kubectl auth can-i create storageclasses --as sonia
# kubectl auth can-i create persistentvolumes --as sonia

# create cluster role and corresponding bindings
# kubectl apply -f volume_role.yaml -f vol_rolebdg.yaml

# verify cluster level permissions
# kubectl auth can-i create storageclasses --as sonia
# kubectl auth can-i create persistentvolumes --as sonia

# kubectl delete -f volume_role.yaml -f vol_rolebdg.yaml

# Imperative way
# dry run
# kubectl create clusterrole volume_role --resource persistentvolumes,storageclasses --verb get,list,create,delete --dry-run=client -o yaml
# create now
# kubectl create clusterrole volume_role --resource persistentvolumes,storageclasses --verb get,list,create,delete
# create binding dry-run
# kubectl create clusterrolebinding vol_roldbdg --clusterrole volume_role --user sonia --dry-run=client -o yaml
# create
# kubectl create clusterrolebinding vol_roldbdg --clusterrole volume_role --user sonia

# verify cluster level permissions
# kubectl auth can-i create storageclasses --as sonia
# kubectl auth can-i create persistentvolumes --as sonia

# Delete
# kubectl delete clusterrole volume_role
# kubectl delete clusterrolebinding vol_roldbdg
# cd ../sonia
# kubectl delete -f sonia_csr.yaml
