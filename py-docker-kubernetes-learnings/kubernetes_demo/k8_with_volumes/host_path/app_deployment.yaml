apiVersion: v1
kind: Service
metadata:
  name: ichostvol-avc
spec:
  selector:
    app: ichostvol-app
  ports:
  - protocol: "TCP"
    port: 80
    targetPort: 5000
    nodePort: 30008
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ichostvol-app-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: ichostvol-app
    spec:
      containers:
      - name: ichostvol-app-container
        image: cbagade/pykube-data-ichostvol:v1.1
        ports:
          - containerPort: 5000
        # after setting vol at pod, we need to mount that on container on specific path
        # this application is already have data folder
        # so that text file will be available onto pod now, over volume
        volumeMounts:
        - mountPath: /app/userchanges
          # name of volume set on pod, there might be multiple volumes, so need names
          name: userchanges-volume
      # volumes are at container level on pods
      volumes:
      # following volumes can be used by containers then
      # this should be defined first and then the volumeMounts should be added to containers
      # 
      - name: userchanges-volume
        hostPath:
          # specify a directory to host volume , can  be anything
          path: /data
          # should be existing directory or create it
          type: DirectoryOrCreate
  # what pods should be created as a part of deployment
  # see template section, where pods are labelled
  # those pods will be selected to form this deployment
  selector:
    # the labels will be matched based on labels of pods
    matchLabels:
      app: ichostvol-app
  

# docker build -t cbagade/pykube-data-ichostvol:v1.1 .
# docker push cbagade/pykube-data-ichostvol:v1.1
# kubectl apply -f app_deployment.yaml
# ensure pods in running state
# kubectl get pods -w 
# also check which node this pod is places
# kubectl get pods -o wide
# following will fetch error
# curl 'http://localhost:30008/api/v1/fruits'

# post data (existing fruits plus appending additional fruits)
# curl --location 'http://localhost:30008/api/v1/fruits' \
#  --header 'Content-Type: application/json' \
# --data '{"fruitName":"Apple","from":"Tamilnadu","nutrients":"Vitamin B, Vitamin K","price":"200.50","organic":true,"description":"An avocado is a bright green fruit with a large pit and dark leathery skin. They'\''re also known as alligator pears or butter fruit. Avocados are a favorite of the produce section. They'\''re the go-to ingredient for guacamole dips."}'

# Verify the changes (additional fruits along with original ones)
# curl 'http://localhost:30008/api/v1/fruits'


# GET  app_2/api/v1/fruits/error change port to 30008, this will restart container,
# This action will put container in error state and restart (pod is not restarted)
# curl 'http://localhost:30008/api/v1/fruits/error'
# Observe container restart
# kubectl get pods -w

# GET app_2/api/v1/fruits change port to 30008
# curl 'http://localhost:30008/api/v1/fruits'
# changes are available, so hostPath can survice container restart

# try deleting pod
# kubectl delete -f app_deployment.yaml
# kubectl apply -f app_deployment.yaml
# ensure pods in running state
# kubectl get pods -w 

# GET app_2/api/v1/fruits change port to 30008
# curl 'http://localhost:30008/api/v1/fruits'
# changes are not lost (provided pod is placed on same node), so hostPath can survive pod restart


# kubectl delete -f app_deployment.yaml