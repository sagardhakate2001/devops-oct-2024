apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: second-app
  ports:
  - protocol: "TCP"
    port: 80
    targetPort: 5000
    nodePort: 30008
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: second-app-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: second-app
        tier: backend
    spec:
      containers:
      - name: second-app-container
        # you need to create this image and push to registry
        image: cbagade/py-kube-data-pvvol:v5
        ports:
          - containerPort: 5000        
        # after setting vol at pod, we need to mount that on container on specific path
        # this application is already have story folder, which will be inside app folder (see Dockerfile)
        # so that text file will be available onto pod now, over volume
        volumeMounts:
        - mountPath: /app/userchanges
          # name of volume set on pod, there might be multiple volumes, so need names
          name: userchanges-volume
      # volumes are at container level on pods
      volumes:
      # following volumes can be used by containers then
      # this should be defined first and then the volumeMounts should be added to containers
      # 
      - name: userchanges-volume
        # we are now putting claim on pods to request PV
        persistentVolumeClaim:
          claimName: host-pvc
  selector:
    matchLabels:
      app: second-app
      tier: backend


# docker build -t cbagade/py-kube-data-pvvol:v5 .
# docker push cbagade/py-kube-data-pvvol:v5

# ensure /data dir is clean on both nodes
# ssh vagrant@node01 (and password is vagrant)

# kubectl apply -f host_pv.yaml
# kubectl get pv --> status is Available
# kubectl apply -f host_pvc.yaml
# kubectl get pvc --> status is Bound
# kubectl get pv --> status is Bound
# kubectl apply -f app_deployment.yaml

# following will fetch error
# curl 'http://localhost:30008/api/v1/fruits'

# post data (existing fruits plus appending additional fruits)

#  curl --location 'http://localhost:30008/api/v1/fruits' \
#   --header 'Content-Type: application/json' \
#  --data '{"fruitName":"Apple","from":"Tamilnadu","nutrients":"Vitamin B, Vitamin K","price":"200.50","organic":true,"description":"An avocado is a bright green fruit with a large pit and dark leathery skin. They'\''re also known as alligator pears or butter fruit. Avocados are a favorite of the produce section. They'\''re the go-to ingredient for guacamole dips."}'
 

# Verify the changes (additional fruits along with original ones)
# curl 'http://localhost:30008/api/v1/fruits'


# GET  app_2/api/v1/fruits/error change port to 30008, this will restart container,
# This action will put container in error state and restart (pod is not restarted)
# curl 'http://localhost:30008/api/v1/fruits/error'
# Observe container restart
# kubectl get pods -w

# verify
# curl 'http://localhost:30008/api/v1/fruits'
# changes are available, so hostPath can survice container restart

# kubectl delete -f app_deployment.yaml
# kubectl apply -f app_deployment.yaml
# verify
# curl 'http://localhost:30008/api/v1/fruits'
# changes are not lost, so pv/pvc can survive pod restart

# what will happen to volume once deleted
# read about persistentVolumeReclaimPolicy: Retain and Delete and Recycle
# kubectl delete -f app_deployment.yaml -f host_pvc.yaml -f host_pv.yaml
